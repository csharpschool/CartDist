@page "/counter"
@using CartDist.Classes;
@using CartDist.Extensions;
@inject Shop shop

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>
<input @bind="price" />
<input @bind="vat" />
<button class="btn btn-primary" @onclick="@(() => shop.AddProduct(price, vat))">Click me</button>
<input @bind="count" />
<ul>
    @if (shop.Products is not null)
    {
        @foreach(var prod in shop.Products)
        {
            <li>
                @prod.Id, @prod.Price, @prod.Vat, @prod.Total()
                <button class="btn btn-primary" @onclick="@(() => shop.AddToCart(prod.Id, count))">Add to Cart</button>
            </li>
        }
    }
</ul>

<table class="table">
    <thead>
        <tr>
            @* <th>Product</th> *@
            <th>Price</th>
            <th>Count</th>
            <th>Total</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in shop.CartItems)
        {
            <tr>
                @* <td>@item.ProductName</td> *@
                <td>@item.Product.Price</td>
                <td>@item.Count</td>
                <td>@item.Total</td>
                <td>
                    <button class="btn btn-primary" @onclick="@(() => shop.RemoveCartItem(item.Id))">Remove</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    private int currentCount = 0, count;
    double? price = null, vat = null, total = 0.0;
    //Shop shop = new();


    private void IncrementCount()
    {
        currentCount++;

        //var product = CreateProduct();
        //var total = product?.Total();

        //total = CreateProduct()?.Total();

        //shop.AddProduct(price, vat);

        //ProductRecord pr = new(1, 3);
        
        /*if (product is not null)
        {
            var total = product.Total();
        }*/

        //var result = currentCount.Calculate(0.06);
        //result.Total(3);

        //var result = currentCount.Calculate(0.06).Total(3);

        //ProductExtensions.Calculate(currentCount);
    }
}
